package com.example.aademo.widget;import java.util.ArrayList;import java.util.Iterator;import java.util.LinkedList;import java.util.Queue;import java.util.Random;import com.example.aademo.impl.ViewAdapter;import com.example.aademo.util.PalLog;import android.content.Context;import android.os.Handler;import android.util.AttributeSet;import android.view.View;import android.view.ViewGroup;import android.view.View.MeasureSpec;import android.view.ViewGroup.LayoutParams;public class CustomViewGroup extends ViewGroup {	ViewAdapter mAdapter;	int TopDisplayCount = 0;	private ArrayList<MoveView> mMovedViewQueue = new ArrayList<MoveView>();	public static final int MAXCOUNT = 10;	public int defaultMaxCount = MAXCOUNT;	public CustomViewGroup(Context context) {		super(context);	}	public CustomViewGroup(Context context, AttributeSet attrs) {		super(context, attrs);	}	public CustomViewGroup(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);	}	@Override	protected void onLayout(boolean changed, int l, int t, int r, int b) {		reNewPosition();		removeNonVisibleItems();	}	public void startAnimation() {		Thread t = new Thread(new Runnable() {			@Override			public void run() {				while (true) {					mHandler.sendEmptyMessage(0);					try {						Thread.sleep(10);					} catch (Exception e) {					}				}			}		});				t.start();	}	Handler mHandler = new Handler() {		public void handleMessage(android.os.Message msg) {			requestLayout();		};	};	private void addChildView(View v) {		LayoutParams params = v.getLayoutParams();		if (params == null) {			params = new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);		}		addViewInLayout(v, -1, params, true);		v.measure(MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(getHeight(), MeasureSpec.AT_MOST));	}	private void reNewPosition() {		if (mAdapter == null)			return;		PalLog.printD(mMovedViewQueue.size() + "-----=====-----" + getChildCount());		for (int i = 0; i < mMovedViewQueue.size(); i++) {			// PalLog.printE("tag", "=================");			MoveView mv = mMovedViewQueue.get(i);			int l = mv.getPotinX();			int t = mv.getPointY();			int r = mv.getPotinX() + mv.getmView().getMeasuredWidth();			int b = mv.getPointY() + mv.getmView().getMeasuredHeight();			mv.getmView().layout(l, t, r, b);			// PalLog.printE("tag", "l:"+l+"t:"+t+"r:"+r+"b:"+b);			// PalLog.printE("tag", "=================");			mv.setPointY(t - mv.getSpeed());		}		if (mMovedViewQueue.size() < defaultMaxCount) {			int viewCount = mAdapter.getViewCount();			defaultMaxCount = viewCount < MAXCOUNT ? viewCount : MAXCOUNT;			int endViewIndex = TopDisplayCount + defaultMaxCount - mMovedViewQueue.size();			if (endViewIndex >= viewCount) {				TopDisplayCount = 0;				endViewIndex = TopDisplayCount + defaultMaxCount - mMovedViewQueue.size();			}			for (int i = TopDisplayCount; i < endViewIndex; i++) {				View v = mAdapter.getView(TopDisplayCount, null, this);				addChildView(v);				MoveView moveItem = new MoveView(v);				mMovedViewQueue.add(moveItem);				int l = moveItem.getPotinX();				int t = moveItem.getPointY();				int r = moveItem.getPotinX() + moveItem.getmView().getMeasuredWidth();				int b = moveItem.getPointY() + moveItem.getmView().getMeasuredHeight();				moveItem.getmView().layout(l, t, r, b);			}		}	}	private void removeNonVisibleItems() {		if (mAdapter == null)			return;		int index = mMovedViewQueue.size();		int startIndex = 0;		while (index > 0) {			MoveView child = mMovedViewQueue.get(startIndex);			if (child.getmView().getBottom() - child.getSpeed() <= 0) {				removeViewInLayout(child.getmView());				mMovedViewQueue.remove(startIndex);				TopDisplayCount++;			} else {				startIndex++;			}			index--;		}	}	public void setAdapter(ViewAdapter adapter) {		mAdapter = adapter;	}	class MoveView {		public MoveView(View v) {			mView = v;			speed = new Random().nextInt(10);			speed += 5;// 速率5-15px;			potinX = new Random().nextInt(getWidth() - v.getMeasuredWidth());			pointY = getHeight();		}		View mView;		public View getmView() {			return mView;		}		public void setmView(View mView) {			this.mView = mView;		}		public int getSpeed() {			return speed;		}		public void setSpeed(int speed) {			this.speed = speed;		}		public int getPotinX() {			return potinX;		}		public void setPotinX(int potinX) {			this.potinX = potinX;		}		public int getPointY() {			return pointY;		}		public void setPointY(int pointY) {			this.pointY = pointY;		}		int speed;		int potinX;		int pointY;	}}